require(R2jags)
source("..//Auxiliar_functions/jagsresults.R")
require(ggplot2)
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- rnorm(nobs,5,2)          # random uniform variable
xb <- 2 + 3*x1                 # linear predictor
y <- rnorm(nobs, xb, sd=2)     # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
# JAGS model
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
# set initial values
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
# define parameters
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
#print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
print(jagsfit,justify = "left", digits=2)
#
require(mcmcplots)
traplot(jagsfit)
denplot(jagsfit)
require(R2jags)
source("..//Auxiliar_functions/jagsresults.R")
require(ggplot2)
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- rnorm(nobs,5,2)          # random uniform variable
xb <- 2 + 3*x1                 # linear predictor
y <- rnorm(nobs, xb, sd=2)     # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
# JAGS model
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
# set initial values
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
# define parameters
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
require(mcmcplots)
traplot(jagsfit)
denplot(jagsfit)
#print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
require(mcmcplots)
traplot(jagsfit)
denplot(jagsfit)
#denplot(jagsfit)
require(R2jags)
source("..//Auxiliar_functions/jagsresults.R")
require(ggplot2)
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- rnorm(nobs,5,2)          # random uniform variable
xb <- 2 + 3*x1                 # linear predictor
y <- rnorm(nobs, xb, sd=2)     # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
# JAGS model
NORM <- model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}
# set initial values
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
# define parameters
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
#require(mcmcplots)
#traplot(jagsfit)
#denplot(jagsfit)
#print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
require(mcmcplots)
traplot(jagsfit)
denplot(jagsfit)
params <- c("beta", "sigma")
source('~/Desktop/Greece_ADA/ADA8_R/Normal/Ex5_normal_JAGS_x1.R')
source('~/Desktop/Greece_ADA/ADA8_R/Normal/Ex5_normal_JAGS_x1.R')
source('~/Desktop/Greece_ADA/ADA8_R/Normal/Ex5_normal_JAGS_x1.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex1_Bernoulli_x1_quadratic.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex1_Bernoulli_x1_quadratic.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex1_Bernoulli_x1_quadratic.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex3_Bernoulli_x1_x2_quadratic.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex4_Bernoulli_JAGS_x1.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex5_Bernoulli_JAGS_SFR.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex5_Bernoulli_JAGS_SFR.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex4_Bernoulli_JAGS_x1.R')
source('~/Desktop/Greece_ADA/ADA8_R/Bernoulli/Ex5_Bernoulli_JAGS_SFR.R')
require(R2jags)
require(ggplot2)
source("..//Auxiliar_functions/jagsresults.R")
# read data
SFR_dat<-read.csv("..//astro_data/SFR.csv")
x1 <- log(SFR_dat$Xmol,10)
by <- SFR_dat$SFR
nobs <- nrow(SFR_dat)
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# Construct data dictionary
logitmod <-data.frame(by, x1)
X <- model.matrix(~ 1+x1+I(x1^2)+I(x1^3),
data = logitmod)
XX <- model.matrix(~1+xx+I(xx^2)+I(xx^3))
K <- ncol(X)
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
XX = XX,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 8000)
# check results
jagsresults(x=jagsfit, params=c("beta"))
# Bin data for visualization
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1.25,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=3,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),
colour="blue",width=0.01)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")+
theme(axis.title=element_text(size=25))
source('~/Desktop/Greece_ADA/ADA8_R/Count_models/Ex1_Poisson.R')
# ADA8 – Astronomical Data Analysis Summer School
# Bayesian tutorial by Rafael S. de Souza - ELTE, Hungary & COIN
#
# Partial example from Bayesian Models for Astrophysical Data
# by Hilbe, de Souza & Ishida, 2016, Cambridge Univ. Press
#
# Example of Bayesian Poisson regression in R using JAGS
# synthetic data
# 1 response (y) and 1 explanatory variable (x1)
require(R2jags)
require(ggplot2)
source("..//Auxiliar_functions/jagsresults.R")
set.seed(2016)                                        # set seed to replicate example
nobs <- 500                                           # number of observations
x1 <- runif(nobs)                                     # random uniform variable
xb <- 1 + 2*x1                                        # linear predictor
py <- rpois(nobs, exp(xb))                            # create py as adjusted random Poisson variate
poismod <- data.frame(py,x1)
# Prepare data for prediction
M=1000                                                # Sample size
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ x1, data = poismod)
K <- ncol(X)                                          # Number of betas
POIS.data <- list(Y = py,
X = X,
K = K,
N = nobs,
xx = xx,
M = M)
# JAGS model
Pois<-"model{
# non-informative prior for coefficients
for (i in 1:K) {beta[i] ~ dnorm(0, 1e-4)}
# likelihood function
for (i in 1:N) {
Y[i] ~ dpois(mu[i])
log(mu[i]) <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
log(mux[j])<-beta[1]+beta[2]*xx[j]
Yx[j]~dpois(mux[j])
}
}"
# set initial values
inits  <- function () {
list(beta = rnorm(K, 0, 0.1))
}
# set parameter for prediction
params <- c("Yx")
# fit
P1 <-   jags(data       = POIS.data,
inits      = inits,
parameters = params,
model      = textConnection(Pois),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 5000)
# check results
print(P1, intervals=c(0.025, 0.975), digits=3)
# Plot
yx <- jagsresults(x=P1, params=c('Yx'))
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(poismod ,aes(x=x1,y=py))+
geom_point(colour="blue3",size=1.5,alpha=0.9)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.35, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.15, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
source('~/Desktop/Greece_ADA/ADA8_R/Count_models/Ex2_NegativeBinomial.R')
